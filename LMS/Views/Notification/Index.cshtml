@model List<Notification>

@{
    ViewData["Title"] = "Notifications";
}

@if (User.IsInRole("Admin"))
{
    <div class="container mt-5">
        <h2 class="text-primary" style="margin-top: 7%; margin-left: 40%">📢 Admin Announcement</h2>

        @if (TempData["Success"] != null)
        {
            <div class="position-fixed top-0 start-50 translate-middle-x p-3" style="z-index: 1080;">
                <div id="successToast" class="toast align-items-center text-bg-warning border-0 show shadow" role="alert" aria-live="assertive" aria-atomic="true">
                    <div class="d-flex">
                        <div class="toast-body fw-bold">
                            <i class="bi bi-info-circle-fill me-2"></i>
                            @TempData["Success"]
                        </div>
                        <button type="button" class="btn-primary btn-close btn-close me-2 m-auto fs-6" data-bs-dismiss="toast" aria-label="Close"></button>
                    </div>
                </div>
            </div>
        }


        <form asp-controller="Notification" asp-action="Announce" method="post">
            <div class="mb-3">
                <label for="groupName" class="form-label fw-bold">Send To:</label>
                <select class="form-select" id="groupName" name="groupName" required>
                    <option value="">-- Select Group --</option>
                    <option value="All">All Users</option>
                    <option value="Teachers">Teachers Only</option>
                    <option value="Students">Students Only</option>
                </select>
            </div>

            <div class="mb-3">
                <label for="message" class="form-label fw-bold">Announcement Message:</label>
                <textarea class="form-control" id="message" name="message" rows="5" required></textarea>
            </div>

            <button type="submit" class="btn btn-warning fw-bold px-4">Send Announcement</button>
        </form>
    </div>
}
else
{
    
<div class="modal fade show" id="notificationModal" tabindex="-1" style="display: block;" aria-modal="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header justify-content-between">
                <h5 class="modal-title">Notifications</h5>
                <div class="d-flex gap-2">
                    @if (Model.Any())
                    {
                        <button class="btn btn-sm btn-danger me-2" onclick="confirmDeleteAll()">Delete All</button>
                    }
                    <a href="/" class="btn-close" aria-label="Close"></a>
                </div>
            </div>
            <div class="modal-body">
                <ul class="list-group">
                    @if (!Model.Any())
                    {
                        <li class="list-group-item text-muted">No notifications</li>
                    }
                    else
                    {
                        foreach (var noti in Model)
                        {
                            <li class="list-group-item d-flex justify-content-between align-items-start">
                                <div class="ms-2 me-auto">
                                    <div class="fw-bold @(noti.IsRead ? "" : "text-primary")">@noti.Message</div>
                                    <small>@noti.CreatedAt.ToLocalTime().ToString("g")</small>
                                </div>
                                <div>
                                    @if (!noti.IsRead)
                                    {
                                        <button class="btn btn-sm btn-success me-2" onclick="markAsRead(@noti.Id)">Mark as Read</button>
                                    }
                                    <button class="btn btn-sm btn-danger" onclick="confirmDelete(@noti.Id)">Delete</button>
                                </div>
                            </li>
                        }
                    }
                </ul>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        function markAsRead(id) {
            fetch(`/Notification/MarkAsRead?id=${id}`, { method: 'POST' })
                .then(() => location.reload());
        }

        function confirmDelete(id) {
            Swal.fire({
                title: 'Delete this notification?',
                text: "This action cannot be undone.",
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#d33',
                cancelButtonColor: '#6c757d',
                confirmButtonText: 'Yes, delete it'
            }).then((result) => {
                if (result.isConfirmed) {
                    deleteNotification(id);
                }
            });
        }

        function deleteNotification(id) {
            fetch(`/Notification/Delete?id=${id}`, { method: 'POST' })
                .then(() => {
                    Swal.fire({
                        icon: 'success',
                        title: 'Deleted!',
                        text: 'Notification removed.',
                        timer: 1500,
                        showConfirmButton: false
                    }).then(() => location.reload());
                });
        }

        function confirmDeleteAll() {
            Swal.fire({
                title: 'Delete ALL notifications?',
                text: "This action cannot be undone!",
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#d33',
                cancelButtonColor: '#6c757d',
                confirmButtonText: 'Yes, delete all'
            }).then((result) => {
                if (result.isConfirmed) {
                    fetch(`/Notification/DeleteAll`, { method: 'POST' })
                        .then(() => {
                            Swal.fire({
                                icon: 'success',
                                title: 'All deleted!',
                                text: 'All notifications removed.',
                                timer: 1500,
                                showConfirmButton: false
                            }).then(() => location.reload());
                        });
                }
            });
        }

            window.addEventListener("DOMContentLoaded", function () {
                const toastEl = document.getElementById("successToast");
                if (toastEl) {
                    const toast = new bootstrap.Toast(toastEl, {
                        autohide: true,
                        delay: 7000 
                    });
                    toast.show();
                }
            });

    </script>
}
}
